plugins {
  id "us.kirchmeier.capsule" version "1.0.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin:'application'



configurations {
	all*.exclude group: 'org.codehaus.groovy', module: 'groovy'
	all*.exclude group: 'log4j'
	all*.exclude group: 'xml-apis'
    all*.exclude group: 'commons-logging'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

	mainClassName = 'io.macgyver.cli.CLI'


task fatCapsule(type: FatCapsule, dependsOn: "compileJava" ) {
	applicationClass 'io.macgyver.cli.CLI'
}

task exeFatCapsule(type:Exec, dependsOn: "fatCapsule") {
    executable "bash"
    args "${projectDir}/makeExec.sh"
}

jar.doLast {

    tasks.fatCapsule.execute()
    tasks.exeFatCapsule.execute()
    
 
    def capsuleJar = new File(project.projectDir,"build/libs/macgyver-cli-${project.version}-capsule.jar")
 
    
    
    if (!capsuleJar.exists()) {
        throw new IllegalStateException("capsule jar is missing ${capsuleJar.absolutePath}")
    }
    else {
        println "capsule jar: ${capsuleJar.absolutePath}"
    }
    
    def targetInCore  = new File(project.projectDir,"../macgyver-core/src/main/resources/cli/macgyver-cli-capsule.jar")
    ant.copy(tofile: targetInCore.absolutePath, file: capsuleJar.absolutePath,overwrite:true, failonerror:false)  
    if (!targetInCore.exists()) {
        throw new IllegalStateException("target jar in macgyver-core is missing: ${targetInCore.absolutePath}")
    }
    else {
        println "target in core: ${targetInCore.absolutePath}"
    }
}




dependencies {

	compile "ch.qos.logback:logback-classic:${LOGBACK_VERSION}"
	compile "org.slf4j:jcl-over-slf4j:${SLF4J_VERSION}"


    compile "com.google.guava:guava:${GUAVA_VERSION}"
	compile 'com.beust:jcommander:1.48'
	compile "io.macgyver.okrest3:okrest:${OKREST3_VERSION}"
    compile "com.squareup.okhttp3:logging-interceptor:${OKHTTP3_VERSION}"

	testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}"
	testCompile "com.squareup.okhttp3:mockwebserver:${OKHTTP3_VERSION}"
	testCompile "junit:junit:${JUNIT_VERSION}"
	testCompile "org.assertj:assertj-core:${ASSERTJ_VERSION}" 

}


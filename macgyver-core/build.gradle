apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin:'application'

/*
configurations {
	all*.exclude group: 'org.codehaus.groovy', module: 'groovy'
	all*.exclude group: 'log4j'
	all*.exclude group: 'xml-apis'
    all*.exclude group: 'commons-logging'
}*/

mainClassName = 'io.macgyver.core.ServerMain'


dependencies {

   
    compile "org.slf4j:jcl-over-slf4j:${SLF4J_VERSION}"
    
    compile "com.google.guava:guava:${GUAVA_VERSION}"
    compile 'com.google.code.gson:gson:2.2.4'
    compile "org.springframework:spring-context-support:${SPRING_VERSION}"
    compile 'joda-time:joda-time:2.3'
    compile 'com.lambdaworks:scrypt:1.4.0'
    compile 'org.mapdb:mapdb:1.0.1'
    compile "org.glassfish:javax.json:1.0.4"
    compile 'org.codehaus.groovy:groovy-all:2.1.9'
    compile 'org.jboss.resteasy:resteasy-jaxrs-all:3.0.8.Final'
    compile 'javax.inject:javax.inject:1'
    compile 'com.ning:async-http-client:1.7.23'
	compile "ch.qos.logback:logback-classic:${LOGBACK_VERSION}"
    compile("org.springframework.boot:spring-boot-starter-web:${SPRING_BOOT_VERSION}")
   // compile("org.springframework.boot:spring-boot-starter-thymeleaf:${SPRING_BOOT_VERSION}")
  //  compile("org.springframework.boot:spring-boot-starter-security:${SPRING_BOOT_VERSION}")
     compile 'org.rythmengine:rythm-engine:1.0'
         compile "org.apache.shiro:shiro-spring:${SHIRO_VERSION}"
     compile 'org.webjars:bootstrap:3.1.1-1'
     compile "org.webjars:jquery:2.1.1"
     compile "org.webjars:ace:1.1.3"
    testCompile("org.springframework.boot:spring-boot-starter-test:${SPRING_BOOT_VERSION}")
	testCompile "org.springframework:spring-test:${SPRING_VERSION}"
	testCompile group: "junit", name: "junit", version: "${JUNIT_VERSION}"

}

task showRepos << {
    println "All repos:"
    println repositories.collect { it.name }
}

run {  
    
    if ( project.hasProperty("macgyver.project.dir")) {
        systemProperty "macgyver.project.dir", project['macgyver.project.dir']
    }
    if ( project.hasProperty("appArgs") ) {  
        args Eval.me(appArgs)  
    }  
}
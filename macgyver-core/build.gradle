import org.ajoberstar.grgit.*

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin:'application'
apply plugin: 'spring-boot' 

configurations {
all*.exclude group: 'org.apache.maven.scm'
all*.exclude group: 'org.codehaus.groovy', module: 'groovy'
all*.exclude group: 'log4j'
all*.exclude group: 'xml-apis'
all*.exclude group: 'commons-logging'
//all*.exclude group: 'javax.validation'

}
mainClassName = 'io.macgyver.core.ServerMain'


dependencies {
    
    compile "org.codehaus.groovy:groovy-all:${GROOVY_VERSION}"
    compile "org.slf4j:jcl-over-slf4j:${SLF4J_VERSION}"
    compile "io.macgyver.neorx:neorx:${NEORX_VERSION}"

    compile "com.google.guava:guava:${GUAVA_VERSION}"
    compile 'com.google.code.gson:gson:2.2.4'
    compile "org.springframework:spring-context-support:${SPRING_VERSION}"
    compile "org.springframework:spring-tx:${SPRING_VERSION}"
    
    compile 'org.ocpsoft.prettytime:prettytime:3.2.5.Final'
    compile 'joda-time:joda-time:2.3'
    
    compile 'com.lambdaworks:scrypt:1.4.0'
	compile 'it.sauronsoftware.cron4j:cron4j:2.2.5'
	compile 'com.hazelcast:hazelcast:3.2.5'
	
	compile 'aspectj:aspectjweaver:1.5.4'
	
    compile "org.glassfish:javax.json:1.0.4"
    
    
    compile "org.bouncycastle:bcprov-jdk15on:${BOUNCYCASTLE_VERSION}"
    compile "org.bouncycastle:bcpkix-jdk15on:${BOUNCYCASTLE_VERSION}"
    compile "org.jboss.resteasy:jaxrs-api:${RESTEASY_VERSION}"
    compile "org.jboss.resteasy:resteasy-client:${RESTEASY_VERSION}"
    compile "org.jboss.resteasy:resteasy-jackson2-provider:${RESTEASY_VERSION}"
    
    compile 'javax.inject:javax.inject:1'
    compile 'com.ning:async-http-client:1.7.23'
    compile 'com.squareup.okhttp:okhttp:2.1.0'
	compile "ch.qos.logback:logback-classic:${LOGBACK_VERSION}"


    compile("org.springframework.boot:spring-boot-starter-web:${SPRING_BOOT_VERSION}")
    compile("org.springframework.boot:spring-boot-starter-remote-shell:${SPRING_BOOT_VERSION}")
    
    compile("org.springframework.boot:spring-boot-starter-security:${SPRING_BOOT_VERSION}")
    compile "org.springframework.security:spring-security-ldap:${SPRING_SECURITY_VERSION}"

	compile 'net.lingala.zip4j:zip4j:1.3.2'

	compile "org.bouncycastle:bcpkix-jdk15on:${BOUNCYCASTLE_VERSION}"
	compile "org.bouncycastle:bcprov-jdk15on:${BOUNCYCASTLE_VERSION}"
	

	
   /* compile(group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final') { 
          artifact { 
              name = "validation-api" 
              type = 'jar' 
          } 
          artifact { 
              name = "validation-api" 
              classifier = 'sources' 
              type = 'jar' 
          } 
      } 
	   */
  	compile("com.vaadin:vaadin-server:${VAADIN_VERSION}")
  	compile("com.vaadin:vaadin-client-compiled:${VAADIN_VERSION}")
	compile("com.vaadin:vaadin-themes:${VAADIN_VERSION}")
  //	compile("com.vaadin:vaadin-client:${VAADIN_VERSION}")
  	//compile("com.vaadin:vaadin-push:${VAADIN_VERSION}")
	  
	// * * * * * * * * * * //
	//     GSP Support     //
	// * * * * * * * * * * //
    compile("org.grails:grails-gsp-spring-boot:1.0.0.RC1")  {
		exclude (group: "org.springframework.boot", module: "spring-boot-cli")
	}  
    compile("org.grails:grails-web-gsp:2.4.3") {
		exclude (group: "org.springframework.boot", module: "spring-boot-cli")
	}
    compile("org.grails:grails-web-jsp:2.4.3")   
	compile 'org.grails:grails-web-gsp-taglib:2.4.3'




    compile 'org.webjars:bootstrap:3.1.1-1'
    compile "org.webjars:jquery:2.1.1"
    compile "org.webjars:ace:1.1.3"
    
    

    testCompile("org.springframework.boot:spring-boot-starter-test:${SPRING_BOOT_VERSION}")
    testCompile "org.springframework:spring-test:${SPRING_VERSION}"
    testCompile group: "junit", name: "junit", version: "${JUNIT_VERSION}"
    testCompile project(':macgyver-test')

}

compileJava.doLast() {
    def p = new Properties()

    p.setProperty("version",project.version)
    p.setProperty("artifactId",project.name)
    p.setProperty("groupId","io.macgyver")
    
    def gitrepo = Grgit.open(project.file('..'))
    p.setProperty("gitCommitId",gitrepo.head().id)
    p.setProperty("gitShortCommitId",p.gitCommitId.substring(0,7))
    p.setProperty("githubCommitUrl","https://github.com/if6was9/macgyver/commit/${p.gitCommitId}")
    p.setProperty("gitBranchName",new org.ajoberstar.grgit.service.BranchService(gitrepo.repository).getCurrent().getName())
    p.setProperty("gitBranchFullName",new org.ajoberstar.grgit.service.BranchService(gitrepo.repository).getCurrent().getFullName())
    new File("${project.projectDir}/src/main/resources/macgyver-core-revision.properties").withOutputStream {
        p.store(it,"revision info")
    }
    
}

task showRepos << {
    println "All repos:"
    println repositories.collect { it.name }
}

run {  
    
    if ( project.hasProperty("macgyver.project.dir")) {
        systemProperty "macgyver.project.dir", project['macgyver.project.dir']
    }
    if ( project.hasProperty("appArgs") ) {  
        args Eval.me(appArgs)  
    }  
}
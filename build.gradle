

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}
/*allprojects {
    group 'io.macgyver'
    version = '1.0.0-SNAPSHOT'
}
*/


buildscript {
	ext {
		springBootVersion = '1.1.5.RELEASE'
	}
    repositories {
		mavenLocal()
    	mavenCentral()
		jcenter()
    }
    dependencies {

        classpath 'org.ajoberstar:gradle-git:0.8.0'
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

	      classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0"
	  
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
	apply plugin: 'checkstyle'
	apply plugin: "com.github.hierynomus.license"
    
    group 'io.macgyver'
    version = "${MACGYVER_VERSION}"
    
	checkstyle {
	       ignoreFailures = false 
	       configFile = rootProject.file('config/checkstyle.xml')
	}
    license {
		ignoreFailures true
		    includes(["**/*.java"])
			header rootProject.file('config/license-header.txt')
	}
    configurations {
		all*.exclude group: 'commons-logging', module: 'commons-logging'
    	all*.exclude group: 'org.codehaus.groovy', module: 'groovy'
    	all*.exclude group: 'log4j'
    	all*.exclude group: 'xml-apis'
		all*.exclude group: 'org.bouncycastle', module: 'bcprov-jdk16'
        all*.exclude group: 'javax.ws.rs' , module: 'jsr311-api'
		
		provided
    }
    

 	
	sourceSets {
	    main.compileClasspath += configurations.provided
	    test.compileClasspath += configurations.provided
	    test.runtimeClasspath += configurations.provided
	}
 
	
    repositories {
  	   mavenLocal()
        mavenCentral()
		jcenter()
	    maven {
			name "splunk"
	        url "http://splunk.artifactoryonline.com/splunk/ext-releases-local/"
	
	    }

    }
    
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
	
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

	task javadoc(type:Javadoc, overwrite:true) {
		// needed because of vaadin's habit of keeping source in jars
	}
		
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
		
		
    }
	
	artifacts {
	        archives sourcesJar, javadocJar
	}
    eclipse {
        jdt {
            //if you want to alter the java versions (by default they are configured with gradle java plugin settings):
            sourceCompatibility = 1.7
            targetCompatibility = 1.7
        }
    }
	uploadArchives {
	    repositories {
	        mavenDeployer {
	            name = 'macgyver-bintray'
                if (!project.hasProperty('bintrayUser')) {
                    project.ext['bintrayUser']=""
                }
                if (!project.hasProperty('bintrayKey')) {
                    project.ext['bintrayKey']=""
                }
	            repository(id: 'macgyver-bintray', url: 'https://api.bintray.com/maven/robschoening/io-macgyver/io-macgyver'){
	                authentication(userName: bintrayUser, password: bintrayKey)
				}
                pom.project {
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                
                }
	        }
	    }
	}

    tasks.eclipse.doLast { 
        /** Seems that blueprints-neo4j is bringing in a broken transitive dependency that bothers Eclipse.
         ** This patches the problem by removing the broken classpath entry. **/
        def nodesToRemove = []
        def file = new File(".classpath")
	if (file.exists()) {
        def root = new XmlParser().parse(file)
    
        // find the broken elements
        root.findAll{it.@path =~ /neo4j.*\.pom/ }.each {
            nodesToRemove.add(it)
        }
    
        // remove the broken elements
        nodesToRemove.each {
            it.parent().remove(it)
        }
        // write the file back outq
        file.withWriter {
            new XmlNodePrinter(new PrintWriter(it)).print(root)
        }
	}
    }
    
}


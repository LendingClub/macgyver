




buildscript {
	ext {
		springBootVersion = '1.2.2.RELEASE'
	}
    repositories {
		mavenLocal()
    	mavenCentral()
		jcenter()
    }
    dependencies {

		classpath 'org.ajoberstar:gradle-git:1.0.0'
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

    }
}

plugins {
    id "com.github.hierynomus.license" version "0.11.0"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
	apply plugin: 'checkstyle'
	apply plugin: "com.github.hierynomus.license"
	apply plugin: "signing"
    
    group 'io.macgyver'
    version = "${MACGYVER_VERSION}"
	
	checkstyle {
	       ignoreFailures = false 
	       configFile = rootProject.file('config/checkstyle.xml')
	}
    license {
		ignoreFailures true
		    includes(["**/*.java"])
			header rootProject.file('config/license-header.txt')
	}
    configurations {
		all*.exclude group: 'commons-logging', module: 'commons-logging'
    	all*.exclude group: 'org.codehaus.groovy', module: 'groovy'
    	all*.exclude group: 'log4j'
    	all*.exclude group: 'xml-apis'
		all*.exclude group: 'org.bouncycastle', module: 'bcprov-jdk16'
		all*.exclude group: 'javax.ws.rs' , module: 'jsr311-api'

		provided
    }
    

 	
	sourceSets {
	    main.compileClasspath += configurations.provided
	    test.compileClasspath += configurations.provided
	    test.runtimeClasspath += configurations.provided
	}
 
	mainClassName = 'io.macgyver.core.ServerMain'


	// distZip and distTar are useless to us.  However, we like the application plugin
	// on sub-projects so that we can use "gradle run"
	distZip {
	    //archiveName "$project.name-${project.version}.zip"
		exclude('**/*.jar')
	}
	distTar {
	    //archiveName "$project.name-${project.version}.zip"
		exclude('**/*.jar')
	}
	
    repositories {
  	   mavenLocal()
        mavenCentral()
		jcenter()
		maven { url "https://clojars.org/repo" }
	    maven {
			name "splunk"
	        url "http://splunk.artifactoryonline.com/splunk/ext-releases-local/"
	    }
		

    }
    
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
	
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

	task javadoc(type:Javadoc, overwrite:true) {
		// needed because of vaadin's habit of keeping source in jars
	}
		
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
		
		
    }
	
	artifacts {
	        archives sourcesJar, javadocJar, jar
		
	}
    eclipse {
        jdt {
            //if you want to alter the java versions (by default they are configured with gradle java plugin settings):
            sourceCompatibility = 1.8
            targetCompatibility = 1.8
        }
    }
	uploadArchives {
	    repositories {
			
	        mavenDeployer {
	            //name = 'macgyver-bintray'
				if (!project.has('BINRAY_USER')) {
					project.ext['BINTRAY_USER']=System.getenv("BINTRAY_USER")
				}
				if (!project.has('BINTRAY_KEY')) {
					project.ext['BINTRAY_KEY'] = System.getenv("BINTRAY_KEY")
				}
			
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			
	            repository(id: 'macgyver-bintray', url: 'https://api.bintray.com/maven/robschoening/io-macgyver/io-macgyver'){
	                authentication(userName: BINTRAY_USER, password: BINTRAY_KEY)
				}
                pom.project {
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
					scm {
						connection 'scm:git:git@github.com:if6was9/macgyver.git'
						developerConnection 'scm:git:git@github.com:if6was9/macgyver.git'
						url 'git@github.com:if6was9/macgyver.git'
					}
	            	developers {
						developer {
							name 'Rob Schoening'
							email 'robschoening@gmail.com'
						}
					}
                
                }
	        }
	    }
	}

    tasks.eclipse.doLast { 
        /** Seems that blueprints-neo4j is bringing in a broken transitive dependency that bothers Eclipse.
         ** This patches the problem by removing the broken classpath entry. **/
        def nodesToRemove = []
        def file = new File(".classpath")
	if (file.exists()) {
        def root = new XmlParser().parse(file)
    
        // find the broken elements
        root.findAll{it.@path =~ /neo4j.*\.pom/ }.each {
            nodesToRemove.add(it)
        }
    
        // remove the broken elements
        nodesToRemove.each {
            it.parent().remove(it)
        }
        // write the file back outq
        file.withWriter {
            new XmlNodePrinter(new PrintWriter(it)).print(root)
        }
	}
    }
    

	
	signing {
		sign configurations.archives
	}

	signArchives.onlyIf { 

		project.ext['signing.keyId'] = System.getenv("SIGNING_KEY_ID")
		project.ext['signing.password'] = System.getenv("SIGNING_PASSWORD")
		project.ext['signing.secretKeyRingFile'] = new File("./.gnupg/secring.gpg")

		def signingPropertiesSet = project.ext.has('signing.keyId') && project.ext['signing.keyId']
		if (!signingPropertiesSet) {
			println "properties required to sign artifacts not set -- disabling code signing"
		}
		else {
			println "xcc"
			new File("${project.projectDir}/.gnupg").mkdirs()
			ant.get(src: "https://robschoening.s3.amazonaws.com/macgyver/secring.gpg", dest: "./.gnupg/secring.gpg", verbose:true)
		}
		return signingPropertiesSet
	}
}





task createPlugin << {
    def pluginName = System.getProperty("name")
    
    if (pluginName==null || pluginName.trim().length()==0) {
        throw new GradleException("-Dname=<pluginName>")
    }
    def javaPluginName = pluginName.replace("-","").toLowerCase()
    def newProjectDir = new File(project.projectDir,"macgyver-plugin-${pluginName}")
    if (newProjectDir.exists()) {
        throw new GradleException("plugin project already exists: ${newProjectDir}")
    }
    def pluginPackageDir = new File(newProjectDir,"src/main/java/io/macgyver/plugin/${javaPluginName}")
    def pluginResourceDir = new File(newProjectDir,"src/main/resources")
    def pluginTestPackageDir = new File(newProjectDir,"src/test/java/io/macgyver/plugin/${javaPluginName}")
    def pluginTestResourceDir = new File(newProjectDir,"src/test/resources")
    pluginPackageDir.mkdirs()
    pluginResourceDir.mkdirs()
    pluginTestPackageDir.mkdirs()
    pluginTestResourceDir.mkdirs()
    new File(pluginPackageDir,".gitignore") << ""
    new File(pluginResourceDir,".gitignore") << ""
    new File(pluginTestPackageDir,".gitignore") << ""
    new File(pluginTestResourceDir,".gitignore") << ""
    def buildGradleContents = """
    
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'application'

configurations {
    all*.exclude group: 'org.codehaus.groovy', module: 'groovy'
    all*.exclude group: 'log4j'
    all*.exclude group: 'xml-apis'
    all*.exclude group: 'commons-logging'
}


mainClassName = 'io.macgyver.core.ServerMain'

dependencies {  
    
    testCompile project(':macgyver-test')
    compile project(':macgyver-core')
    
}
"""

new File(newProjectDir,"build.gradle") << buildGradleContents
def x = new File(project.projectDir,"settings.gradle").text.replace("macgyver-core',","macgyver-core',\n    'macgyver-plugin-${pluginName}',")

new File(project.projectDir,"settings.gradle").text = x

}

